- name: Ensure macrocontainer data directory exists
  file:
    path: '{{ macrocontainer_storage_path }}'
    state: directory
    owner: '{{ macrocontainer_storage_user }}'
    group: '{{ macrocontainer_storage_user }}'

  # with_fileglob doesn't work for subdirectories, so use `ls` directly
- name: Get list of previously migrated macrocontainers
  shell: 'ls -1 {{ macrocontainer_storage_path }}'
  register: ls_macrocontainer_storage
  changed_when: ls_macrocontainer_storage.stdout != ""

  # docker doesn't seem to offer a simple "Does this container exist?" command
  # but a quiet filter only produces output if it matches, and the 'when'
  # clause on the removal task skips the container if it doesn't
- name: Find any corresponding macrocontainers
  shell: >
      docker ps -aq --filter "name={{ item }}"
  with_items:
    - '{{ ls_macrocontainer_storage.stdout_lines }}'
  register: ps_macrocontainers

- name: Remove any previously migrated macrocontainers
  shell: 'docker stop {{ item.item }} && docker rm -fv {{ item.item }}'
  with_items: '{{ ps_macrocontainers.results }}'
  when: item.stdout

- name: Delete any previously migrated macrocontainer data
  file:
    path: '{{ macrocontainer_storage_path }}/{{ item }}'
    state: absent
  with_items:
    - '{{ ls_macrocontainer_storage.stdout_lines }}'
